/* USING BACKTRACKING : EXHAUSTIVE SEARCH */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode* root) {
        
         vector<int> partialpath={root->val};
         vector<vector<int>>allRoottoLeafpath;
         int sum=0;
         traverse(root,partialpath,allRoottoLeafpath);
      
      for(const auto& path:allRoottoLeafpath){
        int number=0;
        long long factor=1;
        for(int i=path.size()-1;i>=0;i--){
             
            number+=path[i]*factor;
             factor*=10;
             }
        sum+=number;
      }
      return sum;
    }
    private:
      void traverse(TreeNode* node,vector<int>& partialpath,vector<vector<int>>& allRoottoLeafpath){
        if(!node)
        return;
         if(!node->left && !node->right) {
           allRoottoLeafpath.push_back(partialpath);
        } 

        else {
               if(node->left) {
                partialpath.push_back(node->left->val);
               traverse(node->left,partialpath,allRoottoLeafpath);
               partialpath.pop_back();
               }
            if(node->right) {
                  partialpath.push_back(node->right->val);
                traverse(node->right,partialpath,allRoottoLeafpath);
              partialpath.pop_back();
            }
         
            
        }
      }
   
};


/* USING DFS  */
class Solution {
public:
int dfs(TreeNode* node,int sum){
    if(node==NULL)
    return NULL;
    sum=sum*10+node->val;
    if(!node->left && !node->right){
        return sum;
    }
    return dfs(node->left,sum)+dfs(node->right,sum);
}
    int sumNumbers(TreeNode* root) {
        return dfs(root,0);
    }
};
